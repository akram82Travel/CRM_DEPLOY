@model CRMSTUBSOFT.Crm_ReclamationClient

@{
    ViewBag.Title = "Création Réclamation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<div class="content-wrapper">
       <div class="content-header">
           <div class="content-header-left col-md-12 col-12 mb-2 breadcrumb-new card">
               <div class="row no-gutters">
                   <div class="col-md-3"><span style="padding-top: 9px; font-size: 16px; " class="content-header-title mb-0 d-inline-block">Créer Réclamation</span></div>
                   <div class="col-md-4" style=" padding-top: 8px;">
                       <div class="row breadcrumbs-top d-inline-block">
                           <div class="breadcrumb-wrapper">
                               <ol class="breadcrumb">

                                   <li class="breadcrumb-item">
                                       <a href="/Home/IndexClient">Réclamations</a>
                                   </li>
                                   <li class="breadcrumb-item active">
                                       Création
                                   </li>
                               </ol>
                           </div>
                       </div>
                   </div>

               </div>


           </div>

       </div>

       @using (Html.BeginForm())
       {
           @Html.AntiForgeryToken()
           @Html.ValidationSummary(true, "", new { @class = "text-danger" })

           <div class="row">
               <div class="col-lg-12 col-md-12">
                   <div class="card">
                       <div class="card-header pb-0">
                           <h4 class="card-title">	&nbsp;	&nbsp;	&nbsp;	&nbsp;	&nbsp;<br /></h4>
                           <div class="heading-elements">
                               <button type="submit" class="btn btn-success pull-right" style=" margin-top: -12px;"><i class="la la-save"></i> Enregistrer</button>
                           </div>

                           <hr />
                       </div>
                       <div class="card-body row pt-0">
                           @Html.HiddenFor(model => model.Id_Reclamation, new { htmlAttributes = new { @class = "form-control", @value = @ViewData["Compteur"], @readonly = "readonly" } })
                           @Html.HiddenFor(model => model.DateReclamation, new { htmlAttributes = new { @class = "form-control", @type = "datetime-local" } })

                           @Html.HiddenFor(model => model.CodeClient, new { htmlAttributes = new { @class = "form-control", @onchange = "FixeClient()" } })

                           @Html.HiddenFor(model => model.RaisonSociale)

                           <div class="col-md-12">
                               <div class="row">
                                   <div class="col-md-6">
                                       <div class="form-group row no-gutters mb-0">
                                           <div class="col-sm-2 col-form-label">
                                               @Html.EditorFor(model => model.Soft)
                                           </div>
                                           <label for="soft" class="col-sm-10 col-form-label">Logiciel</label>
                                       </div>
                                   </div>
                                   <div class="col-md-6">
                                       <div class="form-group row no-gutters mb-0">
                                           <div class="col-sm-2 col-form-label">
                                               @Html.EditorFor(model => model.Technique)
                                           </div>
                                           <label for="Technique" class="col-sm-10 col-form-label">Technique</label>
                                       </div>
                                   </div>

                               </div>

                           </div>
                           <br /><br /><br />
                           <div class="col-md-6">
                               <div class="form-group row no-gutters">
                                   <label for="NomContact" class="col-sm-3 col-form-label pt-0"> Nom Contact </label>
                                   <div class="col-sm-9">
                                       @Html.EditorFor(model => model.NomContact, new { htmlAttributes = new { @class = "form-control" } })
                                       @Html.HiddenFor(model => model.CodeMoyenCommunication, new { @class = "form-control" })

                                   </div>
                               </div>


                           </div>

                           <div class="col-md-6">
                               <div class="form-group row no-gutters">
                                   <label for="TacheTitre" class="col-sm-3 col-form-label pt-0"> Titre </label>
                                   <div class="col-sm-9">
                                       @Html.EditorFor(model => model.Titre, new { htmlAttributes = new { @class = "form-control" } })
                                       @Html.ValidationMessageFor(model => model.Titre, "", new { @class = "text-danger" })
                                   </div>
                               </div>
                           </div>


                           <div class="col-md-12">
                               <div class="row">

                                   <div class="col-md-6">
                                       <label for="Observation" class="col-sm-12 col-form-label pt-0"> Observation </label>
                                       <div class="col-sm-12">
                                           @Html.TextAreaFor(model => model.Observation, htmlAttributes: new { @class = "form-control" })
                                           @Html.ValidationMessageFor(model => model.Observation, "", new { @class = "text-danger" })
                                       </div>
                                   </div>
                                   <div class="col-md-6">
                                       <label for="Description" class="col-sm-12 col-form-label pt-0"> Description </label>
                                       <div class="col-sm-12">
                                           @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control" })
                                           @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                       </div>

                                   </div>

                               </div>
                           </div>

                       </div>
                       </div>
               </div>
           </div>


       }
    </div>*@


<div class="content-wrapper">
    <div class="content-header">
        <div class="content-header-left col-md-12 col-12 mb-2 breadcrumb-new card">
            <div class="row no-gutters">
                <div class="col-md-3"><span style="padding-top: 9px; font-size: 16px; " class="content-header-title mb-0 d-inline-block">Créer Réclamation</span></div>
                <div class="col-md-4" style=" padding-top: 8px;">
                    <div class="row breadcrumbs-top d-inline-block">
                        <div class="breadcrumb-wrapper">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="/">Tableau de Bord</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="/Home/IndexClient">Réclamation</a>
                                </li>
                                <li class="breadcrumb-item active">
                                    Création
                                </li>
                            </ol>
                        </div>
                    </div>
                </div>

            </div>


        </div>

    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <div class="col-lg-12 col-md-12">
                <div class="card">
                    <div class="card-header pb-0">
                        <h4 class="card-title">	&nbsp;	&nbsp;	&nbsp;	&nbsp;	&nbsp;<br /></h4>
                        <div class="heading-elements">
                            <button type="submit" class="btn btn-success pull-right" style=" margin-top: -12px;"><i class="la la-save"></i> Enregistrer</button>
                        </div>

                        <hr />
                    </div>
                    <div class="card-body row pt-0">
                        @Html.HiddenFor(model => model.Id_Reclamation, new { htmlAttributes = new { @class = "form-control", @value = @ViewData["Compteur"], @readonly = "readonly" } })
                        @Html.HiddenFor(model => model.DateReclamation, new { htmlAttributes = new { @class = "form-control", @type = "datetime-local" } })

                        @Html.HiddenFor(model => model.CodeClient, new { htmlAttributes = new { @class = "form-control" }, @Value = @Session["UserIDClient"] })

                        @Html.HiddenFor(model => model.RaisonSociale, new { htmlAttributes = new { @Value = @Session["UserLogin"] }, @Value = @Session["UserLogin"] })


                        <div class="col-md-4">
                            <label for="NomContact" class="control-label col-md-12">Nom Contact</label>
                            <div class="form-group col-md-12 mb-1" id="NomContact1">
                                <input type="hidden" value="@ViewData["Empty"]" name="listcontact" id="listcontact"/>
                                <select name="@Html.NameFor(model => model.NomContact)" id="@Html.IdFor(model => model.NomContact)" class="selectpicker form-control" data-live-search="true">
                                    <option value="">Sélectionner un contact</option>

                                    @foreach (var item in Model.ListContactClient)
                                    {
                                        <option value="@item.Contact">Client @item.CodeClient: @item.Contact</option>
                                    }

                                </select>

                            </div>
                            <div class="form-group col-md-12 mb-1" id="NomContact2">
                                <input type="text" class = "form-control" name="Newnomcontact" id="Newnomcontact"/>
                            </div>

                            <label for="MoyenCommunication" class="control-label col-md-12"> Déjàs Contacter ? </label>
                            <div class="col-sm-12">
                                @Html.Partial("_CheckBoxList", (IEnumerable<SelectListItem>)ViewData["ListeMoyenCommunication"])

                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group row no-gutters">
                                <label for="TacheTitre" class="col-sm-12 col-form-label pt-0"> Titre </label>
                                <div class="col-sm-12">
                                    @Html.EditorFor(model => model.Titre, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Titre, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row no-gutters">
                                <label for="Description" class="col-sm-12 col-form-label pt-0"> Description </label>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <div class="col-md-4 ">
                            <div class="form-group row no-gutters">
                                <label for="Nature" class="col-sm-4  pt-0 col-form-label">Nature </label>
                                <div class="col-sm-12">
                                    @Html.DropDownListFor(model => model.Nature, (IEnumerable
                                      <SelectListItem>)ViewData["ListNature"], "Sélectionner nature", new { @class = "selectize-control input-selectize multi", @required = "required", @id = "Nature" })
                                </div>
                            </div>
                            <div class="form-group row no-gutters">
                                <div class="col-sm-12">
                                    
                                    <select name="@Html.NameFor(model => model.IdNatureType)" id="@Html.IdFor(model => model.IdNatureType)" class="selectpicker form-control" data-live-search="true">
                                        <option value="">Sélectionner module nature</option>

                                        @foreach (var item in Model.ListModuleNature)
                                        {
                                            <option value="@item.IdNatureType">@item.Nature: @item.Libelle</option>
                                        }

                                    </select>
                                </div>
                            </div>
                            <div class="form-group row no-gutters">

                                <label for="Observation" class="col-sm-12 col-form-label pt-0"> Observation </label>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(model => model.Observation, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Observation, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>


    }


</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
         if($('#listcontact').val()=="False"){
        //si liste vide
        $('#NomContact2').hide();
        $('#NomContact1').show();
        $('#Newnomcontact').val()="";
        }
        else
        {
        //si liste non vide
        $('#NomContact1').hide();
        $('#NomContact2').show();
        }

    </script>

    <script>
                $(function () {
                    $('#IdNatureType').selectpicker({
                        dropdownAutoWidth: false,

                    });
                    $('#Nature').change(function () {
                        var Nature = $(this).val();
                        if (Nature != "Sélectionner nature") {
                            $('#IdNatureType').find('option:contains("")').show();
                            $('#IdNatureType').find('option:not(:contains("' + Nature + ':"))').hide();
                            $('#IdNatureType').selectpicker('refresh');
                        }
                        else {
                            $('#IdNatureType').find('option').show();
                            $('#IdNatureType').selectpicker('refresh');


                        }
                    });

                });
    </script>

    @if (TempData["ContratMsgActif"] != null)
    {
        <script>
  Swal.fire('@TempData["ContratMsgActif"]')
        </script>

    }

    @if (TempData["ContratMsginActif"] != null)
    {
        <script>

            Swal.fire('@TempData["ContratMsginActif"]')
        </script>

    }
}
<script>

        function FixeClient() {
            $("#RaisonSociale").val($("#CodeClient").val());
            $("#CodeMoyenCommunication").val("Direct");
        }

        var now = new Date();
        now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
        document.getElementById('DateReclamation').value = now.toISOString().slice(0, 16);

</script>



