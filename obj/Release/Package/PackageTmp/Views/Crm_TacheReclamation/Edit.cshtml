@model CRMSTUBSOFT.Crm_TacheReclamation

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="content-wrapper">
    <div class="content-header">
        <div class="content-header-left col-md-12 col-12 mb-2 breadcrumb-new card">
            <div class="row no-gutters">
                <div class="col-md-3"><span style="padding-top: 9px; font-size: 16px; " class="content-header-title mb-0 d-inline-block">Créer une Tâches</span></div>
                <div class="col-md-4" style=" padding-top: 8px;">
                    <div class="row breadcrumbs-top d-inline-block">
                        <div class="breadcrumb-wrapper">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="/">Tableau de Bord</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="/Crm_TacheReclamation">Tâches</a>
                                </li>
                                <li class="breadcrumb-item active">
                                    Editer
                                </li>
                            </ol>
                        </div>
                    </div>
                </div>

            </div>


        </div>

    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })
        @Html.EditorFor(model => model.NumeroEtat, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })
        @Html.EditorFor(model => model.UtilisateurCreateur, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })
        <div class="row">
            <div class="col-lg-12 col-md-12">
                <div class="card">
                    <div class="card-header pb-0">
                        <h4 class="card-title">	&nbsp;	&nbsp;	&nbsp;	&nbsp;	&nbsp;</h4>
                        <div class="heading-elements">
                            <button type="submit" class="btn btn-success pull-right" style=" margin-top: -12px;"><i class="la la-save"></i> Enregistrer</button>
                        </div>
                        <hr />
                    </div>
                    <div class="card-body row pt-0">
                        @Html.HiddenFor(model => model.NumeroTache, new { htmlAttributes = new { @class = "form-control", @value = @ViewData["Compteur"], @readonly = "readonly" } })
                        @Html.HiddenFor(model => model.RaisonSociale, new { htmlAttributes = new { @class = "form-control", @id = "RaisonSociale" } })   


                        <div class="col-md-4">
                            @*<div class="form-group  row no-gutters mb-4">
            <label for="CodeClientParent" class="col-sm-12 pt-0 col-form-label"> Client Parent</label>
            <div class="col-sm-12">
                @Html.DropDownList("CodeClientParent", (IEnumerable<SelectListItem>)ViewData["ListClientParents"], "Sélectionner Client Parent", new { @class = "select2 form-control", @id = "CodeClientParent" })
            </div>
        </div>*@
                            <div class="form-group  row no-gutters mb-4">
                                <label for="CodeProjet" class="col-sm-12 pt-0 col-form-label">Projet</label>
                                <div class="col-sm-12">
                                    @Html.DropDownList("NumPiece", (IEnumerable<SelectListItem>)ViewData["ListProjet"], "Sélectionner Un Projet", new { @class = "select2 form-control", @id = "NumPiece" })
                                </div>
                            </div>
                            <div class="form-group  row no-gutters mb-4" id="clientList" style="display: none">
                                <label for="CodeClient" class="col-sm-12 pt-0 col-form-label"> Client</label>
                                <div class="col-sm-12">
                                    <select name="@Html.NameFor(model => model.CodeClient)" id="@Html.IdFor(model => model.CodeClient)" class="form-control" autocomplete="on" required="required" disabled="disabled">
                                        <option value="@Model.CodeClient">N°:@Model.CodeClient @Model.RaisonSociale</option>

                                        @foreach (var item in ViewData["ListClientP"] as List<Client>)
                                        {
                                            <option value="@item.CodeClient">N°:@item.CodeClient @item.RaisonSociale (@item.CodeClientParent)</option>
                                        }

                                    </select>

                                    <div class="invalid-feedback">Sélectionner un client!</div>

                                </div>
                                <input type="hidden" id="verifCodeClient" value="" />
                            </div>
                            <div class="form-group  row no-gutters mb-4" id="clientListAll">
                                <label for="CodeClient" class="col-sm-12 pt-0 col-form-label"> Client</label>
                                <div class="col-sm-12">

                                    <select name="@Html.NameFor(model => model.CodeClient)" id="@Html.IdFor(model => model.CodeClient)" class="form-control selectpicker" data-live-search="true" required="required">
                                        <option value="@Model.CodeClient">N°:@Model.CodeClient @Model.RaisonSociale</option>

                                        @foreach (var item in ViewData["ListClientP"] as List<Client>)
                                        {
                                            <option value="@item.CodeClient">N°:@item.CodeClient @item.RaisonSociale (@item.CodeClientParent)</option>
                                        }

                                    </select>

                                    <div class="invalid-feedback">Sélectionner un client!</div>
                                </div>
                                <input type="hidden" id="verifCodeClient" value="" />
                            </div>
                            <hr />
                            <div class="form-group row">
                                <label for="NomPlanificateur" class="col-sm-4  pt-0 col-form-label">Nom Planificateur </label>
                                <div class="col-sm-8">
                                    @Html.DropDownListFor(model => model.NomPlanificateur, (IEnumerable
                                       <SelectListItem>)ViewData["ListResponsable"], "", new { @class = "selectize-control input-selectize multi", @id = "NomPlanificateur" })
                                    @Html.ValidationMessageFor(model => model.NomPlanificateur, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="NomValidateur" class="col-sm-4  pt-0 col-form-label">Nom Validateur </label>
                                <div class="col-sm-8">
                                    @Html.DropDownListFor(model => model.NomValidateur, (IEnumerable
                                      <SelectListItem>)ViewData["ListResponsable"], "", new { @class = "selectize-control input-selectize multi", @required = "required", @id = "NomValidateur" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="NomTesteur" class="col-sm-4  pt-0 col-form-label">Nom Testeur </label>
                                <div class="col-sm-8">
                                    @Html.DropDownListFor(model => model.NomTesteur, (IEnumerable
                                      <SelectListItem>)ViewData["ListResponsable"], "", new { @class = "selectize-control input-selectize multi", @id = "NomTesteur" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="NomTesteur" class="col-sm-4  pt-0 col-form-label">Affectée a </label>
                                <div class="col-sm-8">
                                    @Html.ListBoxFor(model => model.SelectedresponsableId, new MultiSelectList(Model.ListeRespensables, "CodeRespensable", "Nom"), new { @multiple = "multiple", @placeholder = "Sélectionner des responsables", @class = "selectize-multiple" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="Nature" class="col-sm-4  pt-0 col-form-label">Nature </label>
                                <div class="col-sm-8">
                                    @Html.DropDownListFor(model => model.Nature, (IEnumerable
                                      <SelectListItem>)ViewData["ListNature"], "Sélectionner nature tache", new { @class = "selectize-control input-selectize multi", @required = "required", @id = "Nature" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group row no-gutters">
                                <label for="TacheTitre" class="col-sm-12 pt-0  col-form-label"> Titre </label>
                                <div class="col-sm-12">
                                    @Html.EditorFor(model => model.TacheTitre, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TacheTitre, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row no-gutters">
                                <label for="DescriptionTache" class="col-sm-12 pt-0  col-form-label"> Description </label>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(model => model.DescriptionTache, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DescriptionTache, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row no-gutters">
                                <label for="EtatValidation" class="col-sm-12 pt-0  col-form-label"> Remarque(s) Développeur </label>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(model => model.EtatValidation, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.EtatValidation, "", new { @class = "text-danger" })
                                </div>
                            </div>


                        </div>
                        <div class="col-md-4">
                            <div class="row">
                                <div class="form-group col-md-6">
                                    <label for="TypePiece">Type Tache </label>
                                    <div>
                                        @Html.DropDownListFor(model => model.Type, (IEnumerable
                                        <SelectListItem>)ViewData["ListType"], "Sélectionner Type tache", new { @class = "select2 form-control", @required = "required", @id = "Type" })
                                        <div class="invalid-feedback">Sélectionner le type de cette tache!</div>
                                    </div>
                                   

                                </div>

                                <div class="form-group col-md-6">
                                    <label for="TypePiece">Mode </label>
                                    <div>
                                        @Html.DropDownListFor(model => model.TypePiece, (IEnumerable
                                        <SelectListItem>)ViewData["ListMode"], "Sélectionner mode tache", new { @class = "select2 form-control", @required = "required", @id = "TypePiece" })
                                        <div class="invalid-feedback">Sélectionner le mode de cette tache!</div>
                                    </div>
                                </div>
                            </div>

                            <hr />

                            <div class="form-group row">
                                <label for="DatePrevus" class="col-sm-3  p-0"> Date Prévue </label>
                                <div class="col-sm-9">
                                    <input type="datetime-local" name="DatePrevus" id="DatePrevus" class="form-control" value="@ViewData["d1"]" />
                                    @Html.ValidationMessageFor(model => model.DatePrevus, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="DateCreation" class="col-sm-3  p-0"> Date Création </label>
                                <div class="col-sm-9">
                                    <input type="datetime-local" name="DateCreation" id="DateCreation" class="form-control" value="@ViewData["d2"]" />
                                    @Html.ValidationMessageFor(model => model.DateCreation, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="row" id="dureeDeveloppeur">
                                    <label for="Duree" class="col-sm-3  p-0"> Durée Estimée </label>
                                    <div class="col-sm-9">
                                        @Html.EditorFor(model => model.Duree, new { htmlAttributes = new { @class = "form-control", @type = "time", @onchange = "MaxDuree()" } })
                                        @Html.ValidationMessageFor(model => model.Duree, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row" id="dureeSprint">
                                    <label for="Duree" class="col-sm-3 col-form-label"> Durée Sprint </label>
                                    <div class="col-sm-9">
                                        <input id="czc" placeholder="XX:XX" pattern="\d\d:\d\d" class="masked form-control"
                                               data-charset="XX:XX" type="text" name="Duree" value="@Model.Duree" />
                                        @Html.ValidationMessageFor(model => model.Duree, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row" id="dureeCommercial">
                                    <label for="Duree" class="col-sm-3 p-0 "> Durée PREVISIONNEL</label>
                                    <div class="col-sm-9">
                                        @Html.EditorFor(model => model.Duree, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                                        @Html.ValidationMessageFor(model => model.Duree, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="Duree" class="col-sm-3 p-0 "> Degrès Priorité</label>
                                    <div class="col-sm-9">
                                        <select name="@Html.NameFor(model => model.Degres)" id="@Html.IdFor(model => model.Degres)" class="form-control selectpicker" data-live-search="true" required="required">
                                            <option value="0" @(Model.Degres == 0 ? "selected" : "")>Choisir Un Degrès de priorité</option>
                                            <option value="1" @(Model.Degres == 1 ? "selected" : "")>Urgent</option>
                                            <option value="2" @(Model.Degres == 2 ? "selected" : "")>Normale</option>
                                            <option value="3" @(Model.Degres == 3 ? "selected" : "")>Faible</option>
                                        </select>
                                    </div>
                                </div>




                            </div>





                            @Html.HiddenFor(model => model.Degres, new { htmlAttributes = new { @class = "form-control", @type = "number" } })


                        </div>

                        <div class="form-group col-md-12 row">

                            @{
                                var style = (Model.NumDossier != "") ? "display: block" : "display: none";
                                var style1 = (Model.NumReclamation != "") ? "display: block" : "display: none";
                                var style2 = (ViewData["NtacheCommercial"] != null) ? "display: block" : "display: none";
                            }
                            @if (Model.NumDossier != "")
                            {
                                <label for="NumeroTache" class="col-sm-4 col-form-label">
                                    <input type="checkbox" checked onclick="LoadList('Rapport')" />  Rapport
                                </label>

                            }
                            else
                            {
                                <label for="NumeroTache" class="col-sm-4 col-form-label">
                                    <input type="checkbox" onclick="LoadList('Rapport','AjoutRapport')" />  Rapport
                                </label>

                            }
                            <div class="col-sm-6" id="Rapport" style="@style">
                                <select name="@Html.NameFor(model => model.NumDossier)" id="@Html.IdFor(model => model.NumDossier)" class="selectpicker form-control" data-live-search="true">
                                    <option value="@Model.NumDossier">@Model.NumDossier </option>

                                    @foreach (var item in Model.ListeRapport)
                                    {
                                        <option value="@item.NumeroRapport">N°:@item.NumeroRapport @Html.Raw(@item.DescriptionRapport) (@item.CodeClient)</option>

                                    }

                                </select>
                            </div>
                            <div class="btn-group" id="AjoutRapport" style="display: none">
                                <a class="btn btn-success" onclick="openModal(myModal);"><i class="la la-plus"></i>Nouveau Rapport</a>

                            </div>
                        </div>
                        @if (Model.NumReclamation != "")
                        {
                            <label for="NumeroRec" class="col-sm-4 col-form-label">
                                <input type="checkbox" checked onclick="LoadList('Reclamation', 'AjoutRecl')" />  Réclamation
                            </label>

                        }
                        else
                        {
                            <label for="NumeroRec" class="col-sm-4 col-form-label">
                                <input type="checkbox" onclick="LoadList('Reclamation', 'AjoutRecl')" />  Réclamation
                            </label>

                        }

                        <div class="col-sm-6" id="Reclamation" style="@style1">
                            <select name="@Html.NameFor(model => model.NumReclamation)" id="@Html.IdFor(model => model.NumReclamation)" class="selectpicker form-control" data-live-search="true">
                                <option value="@Model.NumReclamation">@Model.NumReclamation</option>

                                @foreach (var item in Model.ListeCrm_ReclamationClient)
                                {

                                    <option value="@Model.NumReclamation">N°:@item.Id_Reclamation @Html.Raw(@item.Titre) (@item.CodeClient)</option>
                                }

                            </select>
                        </div>
                        <div class="btn-group" id="AjoutRecl" style="display: none">
                            <a class="btn btn-success" onclick="openModal(myModalReclamation);"><i class="la la-plus"></i>Nouvelle Réclamation</a>
                        </div>
                        <div class="form-group col-md-12 row">
                            @if (ViewData["Empty"].ToString() == "Nonvide" || ViewData["NtacheCommercial"].ToString() == "")
                            {
                                <label for="NumeroTachComm" class="col-sm-4 col-form-label">
                                    <input type="checkbox" onclick="LoadList('Commercial')" />  Tâches PREVISIONNEL
                                </label>
                            }
                            else
                            {
                        <label for="NumeroTachComm" class="col-sm-4 col-form-label">
                            <input type="checkbox" checked onclick="LoadList('Commercial')" />  Tâches PREVISIONNEL
                        </label>
                            }
                            <div class="col-sm-6" id="Commercial" style="@style2">
                                <select name="CommercialTache" id="CommercialTache" class="select2 form-control" data-live-search="true">
                                    <option>@ViewData["NtacheCommercial"].ToString()</option>
                                    @foreach (var item in ViewData["ListTacheCommercial"] as IEnumerable<Crm_TacheReclamation>)
                                    {
                                        <option value="@item.NumeroTache">N°:@item.NumeroTache @Html.Raw(@item.TacheTitre) (@item.CodeClient)</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div class="modal" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <h1 class="modal-title">Nouveau Rapport</h1>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <!-- Modal body -->
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-12 col-md-12">
                        <div class="card">
                            <div class="card-body row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label class="col-form-label">Description</label>
                                        <TextArea name="DescriptionRapportt" id="DescriptionRapportt" style="width:100%"></TextArea>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="col-form-label">Durée</label>

                                            <input type="number" name="DureeRapport" id="DureeRapport" />
                                        </div>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="form-group">
                                            <label class="col-form-label">Date Prévus Prochaine Réunion</label>
                                            <input type="datetime-local" name="DatePrevusProchaineReunion" id="DatePrevusProchaineReunion" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-success pull-right" name="btnSubmit" id="btnSubmit"><i class="la la-save"></i> Enregistrer</button>
                <button type="button" class="btn btn-info" data-dismiss="modal" name="btnSubmit" id="btnSubmit" style="width:100px">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="myModalReclamation">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <h1 class="modal-title">Nouvelle Réclamation</h1>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <!-- Modal body -->
            <div class="modal-body">
                <div class="card-body row pt-0">
                    <div class="col-md-4">
                        <label class="control-label col-md-12">Code Client</label>
                        <div class="form-group col-xl-12 col-lg-12 col-md-12 mb-1">
                            @Html.DropDownList("CodeClientc", (IEnumerable
                            <SelectListItem>)ViewData["ListClient"], "Sélectionner un client", new { @class = "selectize-control input-selectize multi", @id = "CodeClientc", @onchange = "FixeClient()" })
                            @*@Html.Hidden("RaisonSocialec", new { htmlAttributes = new { @class = "form-control", @id = "RaisonSocialec" } })*@
                        </div>
                        <label class="control-label col-md-12">Moyen Communication</label>
                        <div class="form-group col-md-12 mb-1">
                            @Html.DropDownList("CodeMoyenCommunication", (IEnumerable
                            <SelectListItem>)ViewData["ListeMoyenCommunication"], "Sélectionner une moyen", new { @class = "selectize-control input-selectize multi" })
                        </div>
                        <label class="control-label col-md-12">Nom Contact</label>
                        <div class="form-group col-md-12 mb-1">
                            <select name="@Html.Name("NomContact")" id="@Html.Id("NomContact")" class="selectpicker form-control" data-live-search="true">
                                <option value="">Sélectionner un contact</option>
                                @foreach (var item in ViewData["ListeContactClient"] as IEnumerable<ContactClient>)
                                {
                                    <option value="@item.Contact">Client @item.CodeClient: @item.Contact</option>
                                }
                            </select>
                        </div>
                        <label class="control-label col-md-12">Tel Client N°</label>
                        <div class="form-group col-md-12 mb-1">
                            <select name="@Html.Name("OutilCommunication")" id="@Html.Id("OutilCommunication")" class="selectpicker form-control" data-live-search="true">
                                <option value="">Sélectionner un N° Tel</option>
                                @foreach (var item in ViewData["ListeClient"] as IEnumerable<Client>)
                                {
                                    <option value="@item.Tel1">Client @item.CodeClient: @item.Tel1</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        @Html.Label("Titre", htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="form-group  col-md-12 mb-1">
                            @Html.Editor("Titrec", new { htmlAttributes = new { @class = "form-control" } })


                        </div>
                        @Html.Label("Description", htmlAttributes: new { @class = "control-label col-md-12" })
                        <fieldset class="form-group col-md-12 mb-1">

                            @Html.TextArea("Descriptionc", htmlAttributes: new { @class = "form-control" })

                        </fieldset>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group row no-gutters">
                            <label for="Nature" class="col-sm-4  pt-0 col-form-label">Nature </label>
                            <div class="col-sm-12">
                                @Html.DropDownList("Naturec", (IEnumerable
                                  <SelectListItem>)ViewData["ListNature"], "Sélectionner nature tache", new { @class = "selectize-control input-selectize multi", @required = "required", @id = "Naturec" })
                            </div>
                        </div>


                        <label class="control-label col-md-12">Personnel alerté</label>
                        <div class="form-group mb-1">
                            @Html.ListBox("SelectedresponsableIdc", new MultiSelectList(Model.ListeRespensables, "CodeRespensable", "Nom"), new { @multiple = "multiple", @placeholder = "Sélectionner des Personnels", @class = "selectize-multiple" })
                        </div>
                        <div class="row">
                            <div class="form-group col-md-4 mb-0">
                                @Html.Label("Duree", htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="mb-1">
                                    @Html.Editor("Dureec", new { htmlAttributes = new { @class = "form-control", @id = "Dureec" } })
                                </div>


                            </div>

                            <div class="form-group col-md-8 mb-0">
                                <label>Utilisateur Contact</label>
                                @Html.DropDownList("UtilisateurContact", (IEnumerable
                               <SelectListItem>)ViewData["ListUtilisateurContact"], new { @class = "selectize-control input-selectize multi" })
                            </div>
                        </div>
                        @Html.Label("Observation", htmlAttributes: new { @class = "control-label" })
                        <fieldset class="form-group mb-1">

                            @Html.TextArea("Observation", htmlAttributes: new { @class = "form-control" })
                        </fieldset>

                    </div>

                </div>


            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-success pull-right" name="btnSubmitR" id="btnSubmitR"><i class="la la-save"></i> Enregistrer</button>
                <button type="button" class="btn btn-info" data-dismiss="modal" style="width:100px">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
<script src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/masking-input.js" data-autoinit="true"></script>
    <script>//RaisonSociale

    $("#clientListAll #CodeClient").change(function(){
    $("#RaisonSociale").val($("#clientListAll #CodeClient option:selected").text().replace(' ()','').substring(12));
    });

    $("#clientList #CodeClient").change(function(){
    $("#RaisonSociale").val($("#clientList #CodeClient option:selected").text().replace(' ()','').substring(12));
    });

    $("#TacheValidation").submit(function(e){
     if($("#clientList #verifCodeClient").val() == ""){
        e.preventDefault();
       swal({
        title: "Veuillez Sélectionner un client",
        text: "ERROR!",
        icon: "error",
        button: "Fermer",
            });
    }else if($("#clientListAll #verifCodeClient").val() == ""){
        e.preventDefault();
       swal({
        title: "Veuillez Sélectionner un client",
        text: "ERROR!",
        icon: "error",
        button: "Fermer",
            });
    }else if($("#SelectedresponsableId").val() == ""){
        e.preventDefault();
       swal({
        title: "Veuillez affecter la Tache",
        text: "ERROR!",
        icon: "error",
        button: "Fermer",
            });
    } else if($("#Nature").val() == ""){
        e.preventDefault();
       swal({
        title: "Veuillez Sélectionner nature Tache",
        text: "ERROR!",
        icon: "error",
        button: "Fermer",
            });
    } else if($("#TacheTitre").val() == ""){
        e.preventDefault();
       swal({
        title: "Veuillez Saisir Titre Tache",
        text: "ERROR!",
        icon: "error",
        button: "Fermer",
            });
    } else if(CKEDITOR.instances.DescriptionTache.getData() === ''){
        e.preventDefault();
       swal({
        title: "Veuillez Saisir Détails Tache",
        text: "ERROR!",
        icon: "error",
        button: "Fermer",
            });
    } else if($("#TypePiece").val() == ""){
        e.preventDefault();
       swal({
        title: "Veuillez Saisir Mode Tache",
        text: "ERROR!",
        icon: "error",
        button: "Fermer",
            });
     } else if (!$("#dureeSprint").is(":hidden")) {
         // Validate and format the input
         const inputValue = $("#dureeSprint div #czc").val();
         // Validate and format the input
         if (/^\d{0,2}:\d{0,2}$/.test(inputValue)) {
         } else {
             // Clear the input if the format is not valid
             e.preventDefault();
             $("#dureeSprint #czc").val(inputValue);
             swal({
                 title: "Erreur Format Durée 00:00",
                 text: "ERROR!",
                 icon: "error",
                 button: "Fermer",
             });
         }
     }





    });

    $(function () {

    $('#CodeClientParent').change(function () {

    $("#clientList").show();
    $("#clientListAll #CodeClient").show();
    $("#clientList select").prop('disabled', false);
    $("#clientListAll").hide();
    $("#clientListAll #CodeClient").hide();

    $("#clientListAll #CodeClient").prop('disabled', true);
    var code_clientParent = $(this).val();
    if (code_clientParent != "") {
    $('#CodeClient').find('option:contains("")').show();
    $('#CodeClient').find('option:not(:contains("' +code_clientParent + '"))').hide();

    }
    else {
    $('#CodeClient').find('option').show();
    $("#clientList").hide();
    $("#clientList #CodeClient").hide();
    $("#clientList select").prop('disabled', true);
    $("#clientListAll").show();
    $("#clientListAll #CodeClient").show();
    $("#clientListAll #CodeClient").prop('disabled', false);
    $('#CodeClient').selectpicker('refresh');
    }
    });

    });
    </script>
    <script>
       $(function () {
                $('#NumDossier').selectpicker({
                    dropdownAutoWidth: false,
                });
                $('#clientList #CodeClient').change(function () {
                    var code_client = $(this).val();
                    $("#clientList #verifCodeClient").val(code_client);
                    if (code_client != "Sélectionner un client") {
                        $('#NumDossier').find('option:contains("")').show();
                        $('#NumDossier').find('option:not(:contains("' + code_client + '"))').hide();
                        $('#NumDossier').selectpicker('refresh');

                        $('#NumReclamation').find('option:contains("")').show();
                        $('#NumReclamation').find('option:not(:contains("' + code_client + '"))').hide();
                        $('#NumReclamation').selectpicker('refresh');

                        $('#CommercialTache').find('option:contains("")').show();
                        $('#CommercialTache').find('option:not(:contains("' + code_client + '"))').hide();
                        $('#CommercialTache').selectpicker('refresh');
                    } else {
                        $('#NumDossier').find('option').show();
                        $('#NumDossier').selectpicker('refresh');

                        $('#NumReclamation').find('option').show();
                        $('#NumReclamation').selectpicker('refresh');

                        $('#CommercialTache').find('option').show();
                        $('#CommercialTache').selectpicker('refresh');
                    }
                });
                $('#clientListAll #CodeClient').change(function () {
                    var code_client = $(this).val();
                    $("#clientListAll #verifCodeClient").val(code_client);
                    if (code_client != "Sélectionner un client") {
                        $('#NumDossier').find('option:contains("")').show();
                        $('#NumDossier').find('option:not(:contains("' + code_client + '"))').hide();
                        $('#NumDossier').selectpicker('refresh');

                        $('#NumReclamation').find('option:contains("")').show();
                        $('#NumReclamation').find('option:not(:contains("' + code_client + '"))').hide();
                        $('#NumReclamation').selectpicker('refresh');

                        $('#CommercialTache').find('option:contains("")').show();
                        $('#CommercialTache').find('option:not(:contains("' + code_client + '"))').hide();
                        $('#CommercialTache').selectpicker('refresh');
                    } else {
                        $('#NumDossier').find('option').show();
                        $('#NumDossier').selectpicker('refresh');

                        $('#NumReclamation').find('option').show();
                        $('#NumReclamation').selectpicker('refresh');

                        $('#CommercialTache').find('option').show();
                        $('#CommercialTache').selectpicker('refresh');
                    }
                });

            });
    </script>
    <script>
            $(function () {

                $('#CodeClientc').change(function () {
                    var code_client = $(this).val();

                    if (code_client != "Sélectionner un client") {
                        $('#NomContact').find('option:contains("")').show();
                        $('#NomContact').find('option:not(:contains("' + code_client + '"))').hide();
                        $('#NomContact').selectpicker('refresh');

                        $('#OutilCommunication').find('option:contains("")').show();
                        $('#OutilCommunication').find('option:not(:contains("' + code_client + '"))').hide();
                        $('#OutilCommunication').selectpicker('refresh');

                    } else {
                        $('#NomContact').find('option').show();
                        $('#NomContact').selectpicker('refresh');

                        $('#OutilCommunication').find('option').show();
                        $('#OutilCommunication').selectpicker('refresh');
                    }
                });

            });

    </script>

    <script>
        $(document).ready(function () {

            $("#check").click(function ()
            {
            var form = document.getElementById('TacheValidation');
                if ($(this).is(':checked')) {
                  $("#CheckText").val("true");
                  $('#NomValidateurD').hide();
                  $('#NomTesteurD').hide();
                  $('#AffectD').hide();
                  $('#GenralRapport').hide();
                  $('#GenralReclmation').hide();


                }
                else
              {
                 $("#CheckText").val("false");
                 $('#NomValidateurD').show();
                 $('#NomTesteurD').show();
                 $('#AffectD').show();
                 $('#GenralRapport').show();
                 $('#GenralReclmation').show();
              }
            });
        });
    </script>

    <script>
    function openModal(myModal) {
    $(myModal).modal('show');
    }
    </script>

    <script type="text/javascript">

    $(document).ready(function() {
        $(function() {
            $('#btnSubmit').click(function(event) {
                event.preventDefault();
        var CodeClient = "";
        var RaisonSociale = "";
        if($('#clientList #CodeClient').val() != ""){
        CodeClient = $('#clientList #CodeClient').val()
        }else{
        CodeClient = $('#clientListAll #CodeClient').val()
        }
        if($('#clientList #RaisonSociale').val() != ""){
        RaisonSociale = $('#clientList #RaisonSociale').val()
        }else{
        RaisonSociale = $('#clientListAll #RaisonSociale').val()
        }
         var Crm_Rapport = {
              DescriptionRapport: $('#DescriptionRapportt').val(),
              CodeClient:CodeClient,
              RaisonSociale:RaisonSociale,
              Duree:$('#DureeRapport').val(),
              DatePrevusProchaineReunion:$('#DatePrevusProchaineReunion').val()
              };
                $.ajax({
                    type: "POST",
                    url: "/Crm_TacheReclamation/CreateRapport",
                    data: JSON.stringify(Crm_Rapport),
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    success: function(ListNewRapport) {
                        $.each(ListNewRapport, function (i, item) {
                        $('#NumDossier').append('<option value="' + item.Value + '">' + item.Text + '</option>');
                        });
                        $('#NumDossier').selectpicker('refresh');

                        $("#myModal").modal('hide');
                    },
                    error: function() {
                        alert("Error occured!!")
                    }
                });
            });
        });
    });
    </script>

    <script type="text/javascript">

    $(document).ready(function() {
        $(function() {
            $('#btnSubmitR').click(function(event) {
                event.preventDefault();
                   var CodeClientc = $('#CodeClientc').val();
                   var CodeMoyenCommunication = $('#CodeMoyenCommunication').val();
                   var OutilCommunication = $('#OutilCommunication').val();
                   var NomContact = $('#NomContact').val();
                   var Description = $('#Descriptionc').val();
                   var SelectedresponsableIdc = $('#SelectedresponsableIdc').val();
                   var Dureec = $('#Dureec').val();
                   var UtilisateurContact = $('#UtilisateurContact').val();
                   var Observation = $('#Observation').val();
                   var Naturec = $('#Naturec').val();
                   var Titrec = $('#Titrec').val();

                $.ajax({
                    type: "POST",
                    url: "/Crm_TacheReclamation/CreateReclamation",
                    //data: JSON.stringify(Crm_ReclamationClient),
                    data: JSON.stringify({CodeClientc: CodeClientc, NomContact: NomContact, Description: Description, SelectedresponsableIdc: SelectedresponsableIdc, Dureec: Dureec, UtilisateurContact: UtilisateurContact, Observation: Observation, Naturec: Naturec, Titrec: Titrec, OutilCommunication: OutilCommunication, CodeMoyenCommunication: CodeMoyenCommunication}),
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    success: function(ListNewReclamation) {
                        $.each(ListNewReclamation , function (i, item) {
                        $('#NumReclamation').append('<option value="' + item.Value + '">' + item.Text + '</option>');
                        });
                        $('#NumReclamation').selectpicker('refresh');

                        $("#myModalReclamation").modal('hide');
                    },
                    error: function() {
                        alert("Error occured!!")
                    }
                });
            });
        });
    });
    </script>
    <script>
         function MaxDuree()
        {
           //if($("#Duree").val() > "01:00")
           // {
           // //swal({
           // //icon: 'error',
           // //title: 'Oops...',
           // //text: 'Durée Estimée ne doit pas dépasse 01:00 H !',
           // //  })
           // }
         }



             if ('@Model.Nature' == "C") {//previsionnel
                 $("#dureeDeveloppeur").remove();
                 $("#dureeCommercial").show();
                 $("#dureeSprint").remove();
             }
             if ('@Model.Nature' == "SS") {//sprint
                 $("#dureeSprint").show();
                 $("#dureeCommercial").remove();
                 $("#dureeDeveloppeur").remove();
             }
             if ('@Model.Nature' == "S" || '@Model.Nature' == "A") {//soft
                 $("#dureeDeveloppeur").show();
                 $("#dureeCommercial").remove();
                 $("#dureeSprint").remove();
             }




        $("#Nature").change(function () {
            if ($(this).val() == "C") {//previsionnel
                $("#dureeDeveloppeur").hide();
                $("#dureeCommercial").show();
                $("#dureeSprint").hide();
            }
            if ($(this).val() == "SS") {//sprint
                $("#dureeSprint").show();
                $("#dureeCommercial").hide();
                $("#dureeDeveloppeur").hide();
            }
            if ($(this).val() == "S") {//soft
                $("#dureeDeveloppeur").show();
                $("#dureeCommercial").hide();
                $("#dureeSprint").hide();
            }
        })
    </script>

}
<script>
function LoadList(z,y) {
  var x = document.getElementById(z);
  var y = document.getElementById(y);

  if (x.style.display === "none") {
    x.style.display = "block";
  }
   else {
    x.style.display = "none";
  }
  if (y.style.display === "none") {
    y.style.display = "block";
  }
   else {
    y.style.display = "none";
  }
}

 var now = new Date();
now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
document.getElementById('DatePrevusProchaineReunion').value = now.toISOString().slice(0,16);
</script>
