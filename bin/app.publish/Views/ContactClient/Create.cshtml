@model CRMSTUBSOFT.Crm_ReclamationClient

@{
    ViewBag.Title = "Création de nouveau contact client";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="content-wrapper">
    <div class="content-header">
        <div class="content-header-left col-md-12 col-12 mb-2 breadcrumb-new card">
            <div class="row no-gutters">
                <div class="col-md-3"><span style="padding-top: 9px; font-size: 16px; " class="content-header-title mb-0 d-inline-block">Créer un contact client</span></div>
                <div class="col-md-4" style=" padding-top: 8px;">
                    <div class="row breadcrumbs-top d-inline-block">
                        <div class="breadcrumb-wrapper">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="/">Tableau de Bord</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="/ContactClient">Contact Client</a>
                                </li>
                                <li class="breadcrumb-item active">
                                    Création
                                </li>
                            </ol>
                        </div>
                    </div>
                </div>

            </div>


        </div>

    </div>

    @using (Html.BeginForm())
    {

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="row">
            <div class="col-lg-12 col-md-12">
                <div class="card">
                    <div class="card-header pb-0">
                        <h4 class="card-title">	&nbsp;	&nbsp;	&nbsp;	&nbsp;	&nbsp;</h4>
                        <div class="heading-elements">
                            <button type="submit" class="btn btn-success pull-right" style=" margin-top: -12px;"><i class="la la-save"></i> Enregistrer</button>
                        </div>
                        <hr />
                    </div>

                    <div class="card-body row pt-0">
                        <div class="col-md-4">
                            <label class="control-label col-md-12">Code Client</label>
                            <div class="form-group col-xl-12 col-lg-12 col-md-12 mb-1">
                                @Html.DropDownListFor(model => model.CodeClient, (IEnumerable
                                <SelectListItem>)ViewData["ListClients"], "Sélectionner un client", new { @class = "selectize-control input-selectize multi", @id = "CodeClient", @onchange = "FixeClient()" })
                                @Html.HiddenFor(model => model.RaisonSociale, new { htmlAttributes = new { @class = "form-control", @id = "RaisonSociale" } })

                            </div>
                            <label class="control-label col-md-12">Moyen Communication</label>
                            <div class="form-group col-md-12 mb-1">

                                @Html.DropDownListFor(model => model.CodeMoyenCommunication, (IEnumerable
                                <SelectListItem>)ViewData["ListeMoyenCommunication"], "Sélectionner une moyen", new { @class = "selectize-control input-selectize multi" })

                            </div>

                            <label class="control-label col-md-12">Nom Contact</label>
                            <div class="form-group col-md-12 mb-1">

                                <select name="@Html.NameFor(model => model.NomContact)" id="@Html.IdFor(model => model.NomContact)" class="selectpicker form-control" data-live-search="true">
                                    <option value="">Sélectionner un contact</option>

                                    @foreach (var item in Model.ListContactClient)
                                    {
                                        <option value="@Model.NomContact">Client @item.CodeClient: @item.Contact</option>
                                    }

                                </select>
                            </div>

                            <label class="control-label col-md-12">Tel Client N°</label>
                            <div class="form-group col-md-12 mb-1">
                                <select name="@Html.NameFor(model => model.OutilCommunication)" id="@Html.IdFor(model => model.OutilCommunication)" class="selectpicker form-control" data-live-search="true">
                                    <option value="">Sélectionner un N° Tel</option>

                                    @foreach (var item in Model.Listclient)
                                    {
                                        <option value="@Model.OutilCommunication">Client @item.CodeClient: @item.Tel1</option>
                                    }

                                </select>


                            </div>


                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Titre, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="form-group  col-md-12 mb-1">
                                @Html.EditorFor(model => model.Titre, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Titre, "", new { @class = "text-danger" })

                            </div>
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-12" })
                            <fieldset class="form-group col-md-12 mb-1">

                                @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                            </fieldset>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group row no-gutters">
                                <label for="Nature" class="col-sm-4  pt-0 col-form-label">Nature </label>
                                <div class="col-sm-12">
                                    @Html.DropDownListFor(model => model.Nature, (IEnumerable
                                      <SelectListItem>)ViewData["ListNature"], "Sélectionner nature tache", new { @class = "selectize-control input-selectize multi", @required = "required", @id = "Nature" })
                                </div>
                            </div>
                     

                            <label class="control-label col-md-12">Personnel alerté</label>
                            <div class="form-group mb-1">
                                 @Html.ListBoxFor(model => model.SelectedUtilisateurId, new MultiSelectList(Model.ListeUtilisateur, "NomUtilisateur", "Nom","Prenom"), new { @multiple = "multiple", @class = "selectize-multiple" })
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4 mb-0">
                                    @Html.LabelFor(model => model.Duree, htmlAttributes: new { @class = "control-label col-md-12" })
                                    <div class="mb-1">
                                        @Html.EditorFor(model => model.Duree, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Duree, "", new { @class = "text-danger" })
                                    </div>


                                </div>

                                <div class="form-group col-md-8 mb-0">
                                    <label>Utilisateur Contact</label>
                                    @Html.DropDownListFor(model => model.UtilisateurContact, (IEnumerable
                                   <SelectListItem>)ViewData["ListUtilisateurContact"], new { @class = "selectize-control input-selectize multi" })
                                </div>
                            </div>
                            @Html.LabelFor(model => model.Observation, htmlAttributes: new { @class = "control-label" })
                            <fieldset class="form-group mb-1">

                                @Html.TextAreaFor(model => model.Observation, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Observation, "", new { @class = "text-danger" })

                            </fieldset>

                        </div>
                        <div class="form-horizontal">
                            <div class="row">
                                <div class="form-group col-xl-6 col-lg-6 col-md-12">
                                    @Html.HiddenFor(model => model.Id_Reclamation, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.HiddenFor(model => model.DateReclamation, new { htmlAttributes = new { @class = "form-control", @type = "datetime-local" } })

                                </div>


                            </div>



                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.NumeroDossier, htmlAttributes: new { @class = "control-label" })

                                @Html.EditorFor(model => model.NumeroDossier, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.NumeroDossier, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.logo, htmlAttributes: new { @class = "control-label" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.logo, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.logo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label" })

                                @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.TypeReclamation, htmlAttributes: new { @class = "control-label" })

                                @Html.EditorFor(model => model.TypeReclamation, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TypeReclamation, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.DatePrisEnCharge, htmlAttributes: new { @class = "control-label" })

                                @Html.EditorFor(model => model.DatePrisEnCharge, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DatePrisEnCharge, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.ObjetReclamation, htmlAttributes: new { @class = "control-label" })

                                @Html.EditorFor(model => model.ObjetReclamation, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ObjetReclamation, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.Paye, htmlAttributes: new { @class = "control-label" })

                                @Html.EditorFor(model => model.Paye, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Paye, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.TypeReclamation, htmlAttributes: new { @class = "control-label" })

                                @Html.EditorFor(model => model.TypeReclamation, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TypeReclamation, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>






            }
        </div>
        <script>

            function FixeClient() {
                var select = document.getElementById("CodeClient");
                document.getElementById("RaisonSociale").value = select.options[select.selectedIndex].text;
            }
            var now = new Date();
            now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
            document.getElementById('DateReclamation').value = now.toISOString().slice(0, 16);


        </script>
        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")

            <script>
                $(function () {
                    $('#OutilCommunication').selectpicker({
                        dropdownAutoWidth: false,

                    });
                    $('#CodeClient').change(function () {
                        var code_client = $(this).val();
                        if (code_client != "Sélectionner un client") {
                            $('#OutilCommunication').find('option:contains("")').show();
                            $('#OutilCommunication').find('option:not(:contains("' + code_client + '"))').hide();
                            $('#OutilCommunication').selectpicker('refresh');

                            $('#NomContact').find('option:contains("")').show();
                            $('#NomContact').find('option:not(:contains("' + code_client + '"))').hide();
                            $('#NomContact').selectpicker('refresh');

                        }
                        else {
                            $('#OutilCommunication').find('option').show();
                            $('#OutilCommunication').selectpicker('refresh');

                            $('#NomContact').find('option').show();
                            $('#NomContact').selectpicker('refresh');

                        }
                    });

                });
            </script>

            @if (TempData["ConfimationMesage"] != null)
            {
                <script>
            var ID=$('#Id_Reclamation').val();
            Swal.fire({
                        position: 'top-center',
                        title: '@TempData["ConfimationMesage"]',
                        showConfirmButton: true,
                        confirmButtonText:'OUI',
                        denyButtonText:'NON',
                        showDenyButton: true,
            }).then((result) => {
  if (result.isConfirmed) {

window.location.href ="/ContactClient/CreateTacheReclamation?id=" + ID;


  }
  else if (result.isDenied) {
    window.location.href ="/ContactClient/Index";
  }

            })


                </script>
            }
        }
    }
</div>